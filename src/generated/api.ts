/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Text Mutation API
 * API to receive text data and return mutated text.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  MutateText200,
  MutateText400,
  MutateTextBody,
  MutateTextDefault
} from './model'



/**
 * @summary mutate a text
 */
export const mutateText = (
    mutateTextBody: MutateTextBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MutateText200>> => {
    
    return axios.post(
      `/mutate3`,
      mutateTextBody,options
    );
  }



export const getMutateTextMutationOptions = <TError = AxiosError<MutateText400 | MutateTextDefault>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mutateText>>, TError,{data: MutateTextBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof mutateText>>, TError,{data: MutateTextBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mutateText>>, {data: MutateTextBody}> = (props) => {
          const {data} = props ?? {};

          return  mutateText(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MutateTextMutationResult = NonNullable<Awaited<ReturnType<typeof mutateText>>>
    export type MutateTextMutationBody = MutateTextBody
    export type MutateTextMutationError = AxiosError<MutateText400 | MutateTextDefault>

    /**
 * @summary mutate a text
 */
export const useMutateText = <TError = AxiosError<MutateText400 | MutateTextDefault>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mutateText>>, TError,{data: MutateTextBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof mutateText>>,
        TError,
        {data: MutateTextBody},
        TContext
      > => {

      const mutationOptions = getMutateTextMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
