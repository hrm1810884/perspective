/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * Text Modification API
 * API to receive text data and return modified text.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  ModifyText200,
  ModifyText400,
  ModifyTextBody,
  ModifyTextDefault
} from './model'



/**
 * @summary Modify a text
 */
export const modifyText = (
    modifyTextBody: ModifyTextBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ModifyText200>> => {
    
    return axios.post(
      `/modify-text`,
      modifyTextBody,options
    );
  }



export const getModifyTextMutationOptions = <TError = AxiosError<ModifyText400 | ModifyTextDefault>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof modifyText>>, TError,{data: ModifyTextBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof modifyText>>, TError,{data: ModifyTextBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof modifyText>>, {data: ModifyTextBody}> = (props) => {
          const {data} = props ?? {};

          return  modifyText(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ModifyTextMutationResult = NonNullable<Awaited<ReturnType<typeof modifyText>>>
    export type ModifyTextMutationBody = ModifyTextBody
    export type ModifyTextMutationError = AxiosError<ModifyText400 | ModifyTextDefault>

    /**
 * @summary Modify a text
 */
export const useModifyText = <TError = AxiosError<ModifyText400 | ModifyTextDefault>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof modifyText>>, TError,{data: ModifyTextBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof modifyText>>,
        TError,
        {data: ModifyTextBody},
        TContext
      > => {

      const mutationOptions = getModifyTextMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
